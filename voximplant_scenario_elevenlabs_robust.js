/**
 * –£—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ElevenLabs —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –º–æ–¥—É–ª–µ–º Voximplant
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å ElevenLabs
require(Modules.ElevenLabs);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ELEVENLABS_AGENT_ID = 'agent_01jxd1arjvfq9bd1ae6j92cs3t';
const CALLER_ID = '+74951183993';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let callId = null;
let conversationalAIClient = undefined;
let call = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
let isReconnecting = false;
let reconnectTimer = null;

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
    try {
        callId = `call_${Date.now()}`;
        Logger.write(`üìû –£—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ElevenLabs: ${callId}`);
        
        setTimeout(function() {
            const customData = VoxEngine.customData();
            if (customData) {
                try {
                    const customDataParsed = JSON.parse(customData);
                    callId = customDataParsed.call_id || callId;
                    Logger.write(`üìã Custom data: ${JSON.stringify(customDataParsed)}`);
                } catch (e) {
                    Logger.write('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ custom data: ' + e.message);
                }
            }
            
            setTimeout(function() {
                initiateCall();
            }, 1000);
        }, 100);
        
    } catch (error) {
        Logger.write('–û—à–∏–±–∫–∞ –≤ main(): ' + error.message);
        endScenario();
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
 */
function initiateCall() {
    try {
        const customData = VoxEngine.customData();
        let customDataParsed = {};
        
        if (customData) {
            try {
                customDataParsed = JSON.parse(customData);
            } catch (e) {
                Logger.write('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ custom data: ' + e.message);
            }
        }
        
        const clientPhoneNumber = customDataParsed.phone || customDataParsed.phone_number;
        
        if (!clientPhoneNumber) {
            Logger.write('‚ùå –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            endScenario();
            return;
        }
        
        Logger.write(`üìû –ó–≤–æ–Ω–∏–º –Ω–∞: ${clientPhoneNumber}`);
        
        call = VoxEngine.callPSTN(clientPhoneNumber, CALLER_ID);
        
        if (call) {
            call.addEventListener(CallEvents.Connected, async function(event) {
                Logger.write('üìû –ó–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
                
                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
                call.answer();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ElevenLabs –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await setupElevenLabs();
            });
            
            call.addEventListener(CallEvents.Disconnected, function(event) {
                Logger.write('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                cleanupAndEnd();
            });
            
            call.addEventListener(CallEvents.Failed, function(event) {
                Logger.write('‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è: ' + (event.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                cleanupAndEnd();
            });
        }
        
    } catch (error) {
        Logger.write('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: ' + error.message);
        endScenario();
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ElevenLabs —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –º–æ–¥—É–ª–µ–º
 */
async function setupElevenLabs() {
    try {
        if (isReconnecting) {
            Logger.write('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs...');
        } else {
            Logger.write('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ElevenLabs —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –º–æ–¥—É–ª–µ–º');
        }
        
        const customData = VoxEngine.customData();
        let customDataParsed = {};
        
        if (customData) {
            try {
                customDataParsed = JSON.parse(customData);
            } catch (e) {
                Logger.write('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ custom data: ' + e.message);
            }
        }
        
        const agentId = customDataParsed.elevenlabs_agent_id || ELEVENLABS_AGENT_ID;
        const apiKey = customDataParsed.elevenlabs_api_key;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const onWebSocketClose = async (event) => {
            Logger.write('üîå ElevenLabs WebSocket –∑–∞–∫—Ä—ã—Ç');
            Logger.write(JSON.stringify(event));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —É–∂–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (isReconnecting) {
                Logger.write('üîÑ –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                return;
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS && call && call.state() === 'connected') {
                isReconnecting = true;
                reconnectAttempts++;
                Logger.write(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`);
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                if (reconnectTimer) {
                    clearTimeout(reconnectTimer);
                }
                
                reconnectTimer = setTimeout(async () => {
                    try {
                        await setupElevenLabs();
                    } catch (error) {
                        Logger.write('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
                        isReconnecting = false;
                    }
                }, 3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            } else {
                Logger.write('üîå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ');
                isReconnecting = false;
            }
        };
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ElevenLabs –∫–ª–∏–µ–Ω—Ç–∞
        const conversationalAIClientParameters = {
            xiApiKey: apiKey,
            agentId: agentId,
            onWebSocketClose,
        };
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç ElevenLabs –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        conversationalAIClient = await ElevenLabs.createConversationalAIClient(conversationalAIClientParameters);
        
        if (conversationalAIClient && call) {
            Logger.write('‚úÖ ElevenLabs –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–æ–º –∏ ElevenLabs
            VoxEngine.sendMediaBetween(call, conversationalAIClient);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            conversationalAIClient.addEventListener(ElevenLabs.ConversationalAIEvents.ConversationInitiationMetadata, (event) => {
                Logger.write('üé≠ ElevenLabs –¥–∏–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                Logger.write(JSON.stringify(event));
                reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                isReconnecting = false;
            });
            
            conversationalAIClient.addEventListener(ElevenLabs.ConversationalAIEvents.AgentResponse, (event) => {
                Logger.write('ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞');
                Logger.write(JSON.stringify(event));
            });
            
            conversationalAIClient.addEventListener(ElevenLabs.ConversationalAIEvents.UserTranscript, (event) => {
                Logger.write('üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª');
                Logger.write(JSON.stringify(event));
            });
            
            conversationalAIClient.addEventListener(ElevenLabs.ConversationalAIEvents.Interruption, (event) => {
                Logger.write('üîá –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                Logger.write(JSON.stringify(event));
                if (conversationalAIClient) conversationalAIClient.clearMediaBuffer();
            });
            
            conversationalAIClient.addEventListener(ElevenLabs.ConversationalAIEvents.Ping, (event) => {
                Logger.write('üèì Ping –æ—Ç ElevenLabs');
                Logger.write(JSON.stringify(event));
            });
            
            Logger.write('üéµ ElevenLabs –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ');
            
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ElevenLabs –∫–ª–∏–µ–Ω—Ç');
        }
        
    } catch (error) {
        Logger.write('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ElevenLabs: ' + error.message);
        Logger.write(error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        if (reconnectAttempts === 0) {
            endScenario();
        } else {
            isReconnecting = false;
        }
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 */
function cleanupAndEnd() {
    try {
        Logger.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
        
        if (reconnectTimer) {
            clearTimeout(reconnectTimer);
            reconnectTimer = null;
        }
        
        if (conversationalAIClient) {
            conversationalAIClient.close();
        }
        
        if (call) {
            call.hangup();
        }
        
        VoxEngine.terminate();
        
    } catch (error) {
        Logger.write('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + error.message);
        VoxEngine.terminate();
    }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
 */
function endScenario() {
    try {
        Logger.write('üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è');
        cleanupAndEnd();
        
    } catch (error) {
        Logger.write('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ' + error.message);
        VoxEngine.terminate();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VoxEngine.addEventListener('Application.Started', function(event) {
    Logger.write('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    
    if (event && event.customData) {
        try {
            const customDataParsed = JSON.parse(event.customData);
            callId = customDataParsed.call_id || callId;
        } catch (e) {
            Logger.write('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ custom data: ' + e.message);
        }
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º
main();




