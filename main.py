#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ –æ—Ç Voximplant —Å SaluteSpeech API
"""

import json
import logging
import time
from datetime import datetime
from typing import Dict, Any
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse
# from fastapi.staticfiles import StaticFiles
import uvicorn

from ai_dialog_system import process_webhook_event, dialog_system
from ai_dialog_system_advanced import process_webhook_event_advanced, advanced_dialog_system
from call_manager import CallManager
from voximplant_service import VoximplantService
from salutespeech_service_advanced import salutespeech_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="–ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞",
    description="API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç Voximplant —Å SaluteSpeech API",
    version="2.0.0"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
call_manager = CallManager()
voxi_service = VoximplantService()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üì° –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É webhook'–æ–≤ –æ—Ç Voximplant")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("üõë –ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

@app.get("/", response_class=HTMLResponse)
async def root():
    """–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI Call Prototype</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                color: #333;
            }
            
            .container {
                background: rgba(255, 255, 255, 0.95);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                width: 90%;
                max-width: 500px;
            }
            
            .header {
                text-align: center;
                margin-bottom: 30px;
            }
            
            .header h1 {
                font-size: 28px;
                color: #333;
                margin-bottom: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 10px;
            }
            
            .header p {
                color: #666;
                font-size: 16px;
            }
            
            .form-group {
                margin-bottom: 30px;
            }
            
            .form-group label {
                display: block;
                margin-bottom: 10px;
                font-weight: 600;
                color: #333;
            }
            
            .form-group input {
                width: 100%;
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s ease;
            }
            
            .form-group input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            
            .call-button {
                width: 100%;
                padding: 15px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 18px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 10px;
            }
            
            .call-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }
            
            .call-button:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            
            .history {
                margin-top: 40px;
                padding-top: 30px;
                border-top: 2px solid #f0f0f0;
            }
            
            .history h2 {
                font-size: 20px;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
                color: #333;
            }
            
            .call-item {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 10px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .call-number {
                font-weight: 600;
                color: #333;
            }
            
            .call-status {
                font-size: 14px;
                color: #28a745;
                font-weight: 500;
            }
            
            .call-date {
                font-size: 12px;
                color: #666;
                margin-top: 5px;
            }
            
            .loading {
                display: none;
                text-align: center;
                margin-top: 20px;
            }
            
            .spinner {
                display: inline-block;
                width: 20px;
                height: 20px;
                border: 3px solid #f3f3f3;
                border-top: 3px solid #667eea;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ AI Call Prototype</h1>
                <p>–£–º–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
            </div>
            
            <form id="callForm">
                <div class="form-group">
                    <label for="phoneNumber">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</label>
                    <input type="tel" id="phoneNumber" name="phoneNumber" 
                           placeholder="+7 (999) 123-45-67" 
                           value="+7 (999) 123-45-67" required>
                </div>
                
                <button type="submit" class="call-button" id="callButton">
                    üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
                </button>
            </form>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫...</p>
            </div>
            
            <div class="history">
                <h2>üìã –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤</h2>
                <div id="callHistory">
                    <div class="call-item">
                        <div>
                            <div class="call-number">+79850889557</div>
                            <div class="call-date">25.08.2025, 18:37:40</div>
                        </div>
                        <div class="call-status">completed</div>
                    </div>
                    <div class="call-item">
                        <div>
                            <div class="call-number">+79850889557</div>
                            <div class="call-date">26.08.2025, 10:47:20</div>
                        </div>
                        <div class="call-status">completed</div>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            document.getElementById('callForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const phoneNumber = document.getElementById('phoneNumber').value;
                const callButton = document.getElementById('callButton');
                const loading = document.getElementById('loading');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                callButton.disabled = true;
                callButton.innerHTML = '‚è≥ –ó–≤–æ–Ω–∏–º...';
                loading.style.display = 'block';
                
                try {
                    const response = await fetch('/api/call', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            phone_number: phoneNumber
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        addCallToHistory(phoneNumber, 'completed');
                        alert('–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                } finally {
                    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    callButton.disabled = false;
                    callButton.innerHTML = 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É';
                    loading.style.display = 'none';
                }
            });
            
            function addCallToHistory(phoneNumber, status) {
                const historyContainer = document.getElementById('callHistory');
                const callItem = document.createElement('div');
                callItem.className = 'call-item';
                
                const now = new Date();
                const dateString = now.toLocaleDateString('ru-RU') + ', ' + 
                                 now.toLocaleTimeString('ru-RU');
                
                callItem.innerHTML = `
                    <div>
                        <div class="call-number">${phoneNumber}</div>
                        <div class="call-date">${dateString}</div>
                    </div>
                    <div class="call-status">${status}</div>
                `;
                
                historyContainer.insertBefore(callItem, historyContainer.firstChild);
            }
        </script>
    </body>
    </html>
    """

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "active_sessions": len(dialog_system.conversation_sessions),
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/voxi/events")
async def handle_voximplant_webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —Å–æ–±—ã—Ç–∏—è –æ—Ç Voximplant
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ASR –æ—Ç SaluteSpeech API
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        data = json.loads(body) if body else {}
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç Yandex ASR
        if 'text' in data and 'turn' in data:
            # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Yandex ASR
            return await handle_yandex_text_request(data)
        
        event_type = data.get('event', 'unknown')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SaluteSpeech —Å–æ–±—ã—Ç–∏—è
        if event_type in ['start_salutespeech_session', 'process_audio_chunk', 'end_salutespeech_session']:
            result = await handle_salutespeech_event(data)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞
            result = await process_webhook_event_advanced(data)
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {result.get('success', False)}")
        
        return JSONResponse(content=result)
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        raise HTTPException(status_code=400, detail="Invalid JSON")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_salutespeech_event(data: dict) -> dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è SaluteSpeech"""
    try:
        event_type = data.get('event')
        call_id = data.get('call_id', 'unknown')
        
        if event_type == 'start_salutespeech_session':
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é SaluteSpeech
            session_id = await salutespeech_service.start_recognition_session(call_id)
            return {
                "success": True,
                "session_id": session_id,
                "message": "SaluteSpeech session created"
            }
            
        elif event_type == 'process_audio_chunk':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫
            session_id = data.get('session_id')
            audio_data = data.get('audio_data', '')
            
            if session_id and audio_data:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                import base64
                audio_bytes = base64.b64decode(audio_data)
                
                result = await salutespeech_service.process_audio_chunk(call_id, audio_bytes)
                return {
                    "success": True,
                    "result": result,
                    "message": "Audio chunk processed"
                }
            else:
                return {
                    "success": False,
                    "error": "Missing session_id or audio_data"
                }
                
        elif event_type == 'end_salutespeech_session':
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é SaluteSpeech
            session_id = data.get('session_id')
            if session_id:
                await salutespeech_service.end_recognition_session(call_id)
                return {
                    "success": True,
                    "message": "SaluteSpeech session ended"
                }
            else:
                return {
                    "success": False,
                    "error": "Missing session_id"
                }
        
        else:
            return {
                "success": False,
                "error": f"Unknown SaluteSpeech event: {event_type}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SaluteSpeech —Å–æ–±—ã—Ç–∏—è: {e}")
        return {
            "success": False,
            "error": str(e)
        }

async def handle_yandex_text_request(data: dict) -> dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Yandex ASR"""
    try:
        text = data.get('text', '')
        turn = data.get('turn', 1)
        yandex_mode = data.get('yandex_mode', False)
        fast_response = data.get('fast_response', False)
        
        logger.info(f"üá∑üá∫ Yandex ASR –∑–∞–ø—Ä–æ—Å: '{text}' (—Ö–æ–¥ {turn})")
        
        if not text or text.strip() == '':
            return {
                "success": False,
                "error": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
            }
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        response = await generate_gpt_response(text, turn)
        
        logger.info(f"ü§ñ Yandex ASR –æ—Ç–≤–µ—Ç: '{response}'")
        
        return {
            "success": True,
            "response": {
                "text": response,
                "turn": turn,
                "yandex_mode": yandex_mode
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Yandex –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {
            "success": False,
            "error": str(e)
        }

async def generate_simple_response(text: str, turn: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è TRANSTIREX —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    text_lower = text.lower()
    
    # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π TRANSTIREX
    company_info = {
        "name": "TRANSTIREX",
        "services": "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é",
        "benefits": "—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ 20-30%",
        "specialization": "–ª–æ–≥–∏—Å—Ç–∏–∫–∞, —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏"
    }
    
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
    objections = {
        "not_interested": any(word in text_lower for word in ['–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ']),
        "has_carrier": any(word in text_lower for word in ['–µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', '—Ä–∞–±–æ—Ç–∞–µ–º —Å', '—É–∂–µ –µ—Å—Ç—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º', '–ø–∞—Ä—Ç–Ω–µ—Ä', '–¥–æ–≥–æ–≤–æ—Ä']),
        "send_email": any(word in text_lower for word in ['–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø–æ—á—Ç—É', '–Ω–∞–ø–∏—à–∏—Ç–µ email', '–Ω–∞ –æ–±—â—É—é –ø–æ—á—Ç—É', 'info@', '–æ–±—â–∏–π@', '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']),
        "busy": any(word in text_lower for word in ['–∑–∞–Ω—è—Ç', '–Ω–µ—É–¥–æ–±–Ω–æ', '–ø–æ–∑–∂–µ', '–Ω–µ —Å–µ–π—á–∞—Å', '–Ω–µ –≤—Ä–µ–º—è', '—Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É']),
        "secretary": any(word in text_lower for word in ['—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '–ø–æ–º–æ—â–Ω–∏–∫', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–ø—Ä–∏–µ–º–Ω–∞—è', '–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏—è', '–æ–±—â–∏–π –æ—Ç–¥–µ–ª'])
    }
    
    # –≠—Ç–∞–ø 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    if turn == 1:
        if objections["secretary"]:
            return "–ü–æ–Ω–∏–º–∞—é! –¢–æ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏? –ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –Ω–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
        elif objections["not_interested"]:
            return "–ü–æ–Ω–∏–º–∞—é! –ù–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏. –î–∞–≤–∞–π—Ç–µ —è –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –º—ã –ø–æ–º–æ–≥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 30% –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–µ?"
        elif objections["has_carrier"]:
            return "–û—Ç–ª–∏—á–Ω–æ! –ó–Ω–∞—á–∏—Ç, –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏. –ê —á—Ç–æ –µ—Å–ª–∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 20-30% –ø—Ä–∏ —Ç–æ–º –∂–µ –∫–∞—á–µ—Å—Ç–≤–µ?"
        else:
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª—ë–Ω–∞, —è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ TRANSTIREX. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å –∫–µ–º —è –º–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é?"
    
    # –≠—Ç–∞–ø 2: –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏
    elif turn == 2:
        if objections["send_email"]:
            return "–ö–æ–Ω–µ—á–Ω–æ, —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ –æ–±—â—É—é –ø–æ—á—Ç—É. –ù–æ —á—Ç–æ–±—ã –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞—Ç–µ—Ä—è–ª–æ—Å—å —Å—Ä–µ–¥–∏ —Å–æ—Ç–Ω–∏ –¥—Ä—É–≥–∏—Ö, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ª–æ–≥–∏—Å—Ç–∞? –¢–æ–≥–¥–∞ —è —É–∫–∞–∂—É –µ–≥–æ –∏–º—è –≤ —Ç–µ–º–µ –ø–∏—Å—å–º–∞."
        elif objections["busy"]:
            return "–ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å –Ω–µ—É–¥–æ–±–Ω–æ. –î–∞–≤–∞–π—Ç–µ —è –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è? –ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?"
        elif objections["not_interested"]:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç —Ö–æ—Ç—è –±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö? –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ."
        else:
            return "–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Ç–∞–∫–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º, –∫–∞–∫ –≤–∞—à–∞, —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Ä–æ–∫–∏ –∏ —Ä–∏—Å–∫–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è. –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –î–∞–≤–∞–π—Ç–µ —è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç?"
    
    # –≠—Ç–∞–ø 3: –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    elif turn == 3:
        if any(word in text_lower for word in ['—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ']):
            return "–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
        elif objections["send_email"]:
            return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é! –ê –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ —É –≤–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É? –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞."
        else:
            return "–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç: –Ω–∞ email –∏–ª–∏ –≤ WhatsApp?"
    
    # –≠—Ç–∞–ø 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    elif turn == 4:
        if any(word in text_lower for word in ['email', '–ø–æ—á—Ç–∞', '–ø–æ—á—Ç—É']):
            return "–û—Ç–ª–∏—á–Ω–æ! –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç: –≤ WhatsApp –∏–ª–∏ –Ω–∞ email?"
        elif any(word in text_lower for word in ['whatsapp', '–≤–∞–π–±–µ—Ä', '—Ç–µ–ª–µ–≥—Ä–∞–º']):
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –Ø –Ω–∞–ø—Ä–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        else:
            return "–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø—Ä–∞–≤–ª—é –≤–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–æ–¥—ã
    else:
        if objections["not_interested"] or objections["has_carrier"]:
            return "–ü–æ–Ω–∏–º–∞—é! –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç—Å—è, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –Ø –Ω–∞–ø—Ä–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"

async def generate_gpt_response(text: str, turn: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT –¥–ª—è TRANSTIREX —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if any(word in text_lower for word in ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ', '–Ω–µ –∑–≤–æ–Ω–∏—Ç–µ', '–Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ']):
            logger.info(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫–∞–∑ –Ω–∞ —Ö–æ–¥–µ {turn}, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫")
            return "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
        if turn >= 6:
            logger.info(f"ü§ñ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ö–æ–¥–æ–≤ ({turn}), –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫")
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –∏–∑ –ö–∏—Ç–∞—è, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        system_prompt = """–¢—ã ‚Äî –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–º–µ–Ω–µ–¥–∂–µ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ TRANSTIREX. 

–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è ("–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫", "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—â—É—é –ø–æ—á—Ç—É"), –ø–æ–ª—É—á–∏—Ç—å –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é, –ª–∏–±–æ –ø—Ä—è–º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (email –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω) –ª–∏—Ü–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–õ–ü–†) –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ.

–í–ù–ò–ú–ê–ù–ò–ï: –ö–ª—é—á–µ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî —Ç–µ–±—è –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫. –ò—Ö –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ —Å–æ–µ–¥–∏–Ω—è—Ç—å —Å –õ–ü–† –∏ –æ—Ç—Ñ—É—Ç–±–æ–ª–∏—Ç—å –Ω–∞ –æ–±—â—É—é –ø–æ—á—Ç—É, —á—Ç–æ –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –¢–≤–æ—è —Ü–µ–ª—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –Ω–∏–º–∏ ‚Äî –º—è–≥–∫–æ, –Ω–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ, –º–∏–Ω—É—è –æ–±—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä—è–º–æ–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –õ–ü–†, –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É—è —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É.

–ë—É–¥—å –≥–æ—Ç–æ–≤ –≥–∏–±–∫–æ –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–≤–æ–¥—è —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ —Ä—É—Å–ª–æ –∏ –æ—Å—Ç–∞–≤–ª—è—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É —É —Å–µ–±—è.

–ü–õ–ê–ù –î–ò–ê–õ–û–ì–ê:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (—Ö–æ–¥ 1): –≠–Ω–µ—Ä–≥–∏—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –ê–ª—ë–Ω–∞ –∏–∑ TRANSTIREX
2. –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è (—Ö–æ–¥ 2-3): –ú—è–≥–∫–æ, –Ω–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ –≤—ã—è—Å–Ω–∏ –∏–º—è –õ–ü–†
3. –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (—Ö–æ–¥ 4-5): –ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö
4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Ö–æ–¥ 6+): –ü–æ–ª—É—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç

–í–ê–ñ–ù–û: 
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –Ω–µ —Å–∫—Ä–∏–ø—Ç–æ–≤–æ–π
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ –æ—Ç–≤–µ—Ç–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
- –ù–ï –∑–∞–≤–µ—Ä—à–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
- –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –õ–ü–† –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç
- –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è TRANSTIREX (—É–¥–∞—Ä–µ–Ω–∏–µ –Ω–∞ "–ò")
- –¢–≤–æ–µ –∏–º—è ‚Äî –ê–ª—ë–Ω–∞
- –î–∞–≤–∞–π –†–ê–ó–ù–´–ï –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ—Ç–≤–µ—Ç

–°–¢–†–ê–¢–ï–ì–ò–Ø –û–¢–í–ï–¢–û–í:
- –ù–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ö–æ–¥ 1): "–°–ø–∞—Å–∏–±–æ! –Ø –∑–≤–æ–Ω—é –ø–æ –ø–æ–≤–æ–¥—É –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å –∫–µ–º —è –º–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–≤–æ–∑–æ–∫?"
- –ù–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ö–æ–¥ 2): "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Ä–æ–∫–∏ –∏ —Ä–∏—Å–∫–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è. –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –î–∞–≤–∞–π—Ç–µ —è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç?"
- –ù–∞ "–Ω–µ—Ç": "–ü–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–ª–ª–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π? –ò–ª–∏ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º?"
- –ù–∞ –æ—Ç–∫–∞–∑: "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–ï –≥–æ–≤–æ—Ä–∏ "—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è" –∏ –ù–ï –∑–∞–≤–µ—Ä—à–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è —è–≤–Ω–æ."""

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        context = f"""
–•–æ–¥ –¥–∏–∞–ª–æ–≥–∞: {turn}
–û—Ç–≤–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: "{text}"

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π:
1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Ö–æ–¥—É –¥–∏–∞–ª–æ–≥–∞
2. –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –æ—Ç–≤–µ—Ç—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
3. –ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –∫ —Ü–µ–ª–∏ (–∫–æ–Ω—Ç–∞–∫—Ç—ã –õ–ü–† –∏–ª–∏ —Ä–∞—Å—á–µ—Ç)
4. –ó–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
5. –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è —è–≤–Ω–æ
"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        from ai_dialog_system import dialog_system
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        temp_session = {
            'call_id': f'temp_{turn}',
            'history': [],
            'turn_count': turn,
            'created_at': time.time(),
            'last_activity': time.time()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        temp_session['history'].append({
            'role': 'system',
            'content': system_prompt,
            'timestamp': datetime.now().isoformat()
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        temp_session['history'].append({
            'role': 'user',
            'content': context,
            'timestamp': datetime.now().isoformat()
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        response = dialog_system._generate_ai_response(temp_session, text, {})
        
        if response and response.strip():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
            response_lower = response.lower()
            if any(word in response_lower for word in ['—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è', '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞']):
                logger.warning(f"‚ö†Ô∏è GPT –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Ö–æ–¥–µ {turn}, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return generate_fallback_response(text, turn)
            return response.strip()
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            logger.warning(f"‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ö–æ–¥–µ {turn}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return generate_fallback_response(text, turn)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        # Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return generate_fallback_response(text, turn)

def generate_fallback_response(text: str, turn: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑
    if any(word in text_lower for word in ['–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ', '–Ω–µ—Ç –Ω–µ –Ω—É–∂–Ω–æ']):
        return "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if any(word in text_lower for word in ['–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–ø—Ä–æ—â–∞–π—Ç–µ']):
        return "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if any(word in text_lower for word in ['—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ', '—á—Ç–æ —ç—Ç–æ']):
        return "–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é. –°–æ–∫—Ä–∞—â–∞–µ–º —Å—Ä–æ–∫–∏ –Ω–∞ 20-30% –∏ —Å–Ω–∏–∂–∞–µ–º —Ä–∏—Å–∫–∏. –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å email
    if any(word in text_lower for word in ['email', '–ø–æ—á—Ç–∞', '–ø–æ—á—Ç—É', '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ', '–Ω–∞–ø–∏—à–∏—Ç–µ']):
        return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é! –ê –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ —É –≤–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É? –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if any(word in text_lower for word in ['–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å —Å–æ –º–Ω–æ–π']):
        if turn == 1:
            return "–°–ø–∞—Å–∏–±–æ! –Ø –∑–≤–æ–Ω—é –ø–æ –ø–æ–≤–æ–¥—É –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å –∫–µ–º —è –º–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–≤–æ–∑–æ–∫?"
        elif turn == 2:
            return "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Ä–æ–∫–∏ –∏ —Ä–∏—Å–∫–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è. –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –î–∞–≤–∞–π—Ç–µ —è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç?"
        else:
            return "–°–ø–∞—Å–∏–±–æ! –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
    if text_lower in ['–Ω–µ—Ç', '–Ω–µ', '–Ω–µ–∞']:
        if turn <= 3:
            return "–ü–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–ª–ª–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π? –ò–ª–∏ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º?"
        else:
            return "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
    
    # –û–±—â–∏–π fallback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–æ–¥–∞
    if turn <= 2:
        return "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Ä–æ–∫–∏ –∏ —Ä–∏—Å–∫–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è. –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –î–∞–≤–∞–π—Ç–µ —è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç?"
    elif turn <= 4:
        return "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ö—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
    else:
        return "–ü–æ–Ω–∏–º–∞—é, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"

@app.get("/api/sessions")
async def get_active_sessions():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –¥–∏–∞–ª–æ–≥–∞"""
    sessions_info = []
    
    for call_id, session in dialog_system.conversation_sessions.items():
        sessions_info.append({
            "call_id": call_id,
            "turn_count": session["turn_count"],
            "created_at": datetime.fromtimestamp(session["created_at"]).isoformat(),
            "last_activity": datetime.fromtimestamp(session["last_activity"]).isoformat(),
            "history_length": len(session["history"])
        })
    
    return {
        "active_sessions": len(sessions_info),
        "sessions": sessions_info
    }

@app.delete("/api/sessions/{call_id}")
async def cleanup_session(call_id: str):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    try:
        dialog_system.cleanup_session(call_id)
        return {"success": True, "message": f"Session {call_id} cleaned up"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {call_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to cleanup session")

@app.post("/api/cleanup")
async def cleanup_old_sessions():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        dialog_system.cleanup_old_sessions()
        return {"success": True, "message": "Old sessions cleaned up"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
        raise HTTPException(status_code=500, detail="Failed to cleanup old sessions")

@app.post("/api/test/dialog")
async def test_dialog_system(request: Request):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        body = await request.json()
        test_text = body.get("text", "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        test_call_id = body.get("call_id", "test_call_123")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        test_event = {
            "event": "asr_text",
            "call_id": test_call_id,
            "text": test_text,
            "custom_data": {
                "test": True,
                "timestamp": datetime.now().isoformat()
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞
        result = process_webhook_event(test_event)
        
        return {
            "test": True,
            "input": test_text,
            "result": result
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="Test failed")

@app.post("/api/voxi/events")
async def handle_voxi_events(request: Request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç Voximplant
    """
    try:
        body = await request.json()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Voximplant: {body}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
        simple_mode = request.headers.get("X-Simple-Mode") == "true"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ
        if body.get('type') == 'call_data':
            call_data = body.get('callData')
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞: {call_data}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            return {
                "success": True,
                "message": "Call data received"
            }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        elif 'text' in body:
            text = body.get('text', '')
            turn = body.get('turn', 1)
            
            logger.info(f"ü§ñ AI –∑–∞–ø—Ä–æ—Å: '{text}' (—Ö–æ–¥ {turn})")
            
            if simple_mode:
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                response = await generate_simple_response(text, turn)
            else:
                # –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT
                response = await generate_gpt_response(text, turn)
            
            logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: '{response}'")
            
            return {
                "success": True,
                "response": {
                    "text": response,
                    "turn": turn
                }
            }
        
        return {"success": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return {"error": "Internal server error"}, 500

@app.post("/api/call")
async def make_call(request: Request):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Voximplant
    """
    try:
        body = await request.json()
        phone_number = body.get("phone_number")
        
        if not phone_number:
            raise HTTPException(status_code=400, detail="Phone number is required")
        
        logger.info(f"üìû –ó–∞–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä: {phone_number}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Voximplant
        result = voxi_service.start_call(phone_number)
        
        if result.get("success"):
            logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: {result}")
            return {
                "success": True,
                "message": "–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω",
                "call_id": result.get("call_id"),
                "phone_number": phone_number
            }
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞: {result}")
            return {
                "success": False,
                "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–≤–æ–Ω–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"Call failed: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8004,
        reload=True,
        log_level="info"
    )
