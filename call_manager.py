import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import os

from voice_service import voice_service
from gpt_service import gpt_service
from voximplant_service import voximplant_service

@dataclass
class CallSession:
    call_id: str
    phone_number: str
    status: str
    start_time: datetime
    end_time: Optional[datetime] = None
    duration: int = 0
    conversation_history: List[Dict] = None
    audio_file: Optional[str] = None
    analysis: Dict = None
    
    def __post_init__(self):
        if self.conversation_history is None:
            self.conversation_history = []
        if self.analysis is None:
            self.analysis = {}

class CallManager:
    def __init__(self):
        self.active_calls: Dict[str, CallSession] = {}
        self.call_history: List[Dict] = []
        
    async def start_call(self, phone_number: str) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–≤–æ–Ω–∫–∞"""
        
        call_id = str(uuid.uuid4())
        call_session = CallSession(
            call_id=call_id,
            phone_number=phone_number,
            status="initiated",
            start_time=datetime.now()
        )
        
        self.active_calls[call_id] = call_session
        
        try:
            print(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä: {phone_number}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
            simulation_mode = os.getenv("SIMULATION_MODE", "false").lower() == "true"
            
            if simulation_mode:
                print("üîß –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Voximplant")
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                call_session.status = "in_progress"
                call_session.analysis = {
                    "success": True,
                    "duration": 45,
                    "engagement": "medium",
                    "sentiment": "positive",
                    "result": "interested"
                }
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–≤–æ–Ω–∫–∞
                await asyncio.sleep(2)
                
                return {
                    "success": True,
                    "call_id": call_id,
                    "message": "–ó–≤–æ–Ω–æ–∫ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
                }
            
            # 1. –†–µ–ø–ª–∏–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Å–∏–Ω—Ç–µ–∑ –≤—ã–ø–æ–ª–Ω–∏—Ç ElevenLabs –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Voximplant)
            greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, –∑–≤–æ–Ω—é –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –õ–æ–≥–∏—Å—Ç–∏–∫–ü—Ä–æ. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —É –≤–∞—Å –µ—Å—Ç—å –º–∏–Ω—É—Ç–∫–∞?"

            # 2. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Voximplant (–±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞)
            try:
                call_result = voximplant_service.start_call(phone_number)
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {call_result}")
                
                # –ï—Å–ª–∏ Voximplant –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                if not call_result.get("success"):
                    raise Exception(f"Voximplant error: {call_result.get('error', 'Unknown error')}")
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
                # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫: {str(e)}")
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            call_session.status = "in_progress"
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            call_session.conversation_history.append({
                "role": "agent",
                "content": greeting,
                "timestamp": datetime.now().isoformat()
            })
            
            # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞)
            await self._simulate_conversation(call_session)
            
            # 6. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
            call_session.status = "completed"
            call_session.end_time = datetime.now()
            call_session.duration = int((call_session.end_time - call_session.start_time).total_seconds())
            
            # 7. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            call_session.analysis = self._analyze_call_result(call_session)
            
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.call_history.append(asdict(call_session))
            del self.active_calls[call_id]
            
            print(f"–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {call_id}")
            
            return {
                "success": True,
                "call_id": call_id,
                "result": asdict(call_session)
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–≤–æ–Ω–∫–∞: {e}")
            call_session.status = "failed"
            call_session.end_time = datetime.now()
            call_session.analysis = {"error": str(e)}
            
            return {
                "success": False,
                "call_id": call_id,
                "error": str(e)
            }
    
    async def _simulate_conversation(self, call_session: CallSession):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞)"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–º–µ–Ω–æ–≤ —Ä–µ–ø–ª–∏–∫–∞–º–∏
        simulated_responses = [
            "–î–∞, –µ—Å—Ç—å –º–∏–Ω—É—Ç–∫–∞. –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö",
            "–ê –∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–Ω—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è?",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —è –ø–æ–¥—É–º–∞—é –∏ –ø–µ—Ä–µ–∑–≤–æ–Ω—é"
        ]
        
        for i, client_response in enumerate(simulated_responses):
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            call_session.conversation_history.append({
                "role": "client",
                "content": client_response,
                "timestamp": datetime.now().isoformat()
            })
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GPT
            gpt_result = gpt_service.generate_response(
                call_session.conversation_history,
                client_response
            )
            
            agent_response = gpt_result["response"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            call_session.conversation_history.append({
                "role": "agent",
                "content": agent_response,
                "timestamp": datetime.now().isoformat()
            })
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
            emotion = gpt_result["analysis"]["mood"]
            audio_path = voice_service.synthesize_speech(agent_response, "dmitriy", emotion)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            if audio_path:
                call_session.audio_file = audio_path
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–ª–∏–∫–∞–º–∏
            await asyncio.sleep(1)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º
            if i == len(simulated_responses) - 1:
                break
    
    def _analyze_call_result(self, call_session: CallSession) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        agent_messages = [msg for msg in call_session.conversation_history if msg["role"] == "agent"]
        client_messages = [msg for msg in call_session.conversation_history if msg["role"] == "client"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–º–µ–Ω–æ–≤
        success_rate = min(len(client_messages) / 4 * 100, 100)  # –ú–∞–∫—Å–∏–º—É–º 4 –æ–±–º–µ–Ω–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
        engagement = "medium"
        if len(client_messages) >= 3:
            engagement = "high"
        elif len(client_messages) <= 1:
            engagement = "low"
        
        return {
            "success_rate": success_rate,
            "engagement": engagement,
            "total_exchanges": len(client_messages),
            "call_duration": call_session.duration,
            "summary": f"–ó–≤–æ–Ω–æ–∫ –¥–ª–∏–ª—Å—è {call_session.duration} —Å–µ–∫—É–Ω–¥. –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–∏–ª {engagement} —É—Ä–æ–≤–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"
        }
    
    def get_call_history(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤"""
        return self.call_history
    
    def get_call_by_id(self, call_id: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–≤–æ–Ω–∫–µ"""
        # –ò—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
        if call_id in self.active_calls:
            return asdict(self.active_calls[call_id])
        
        # –ò—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        for call in self.call_history:
            if call["call_id"] == call_id:
                return call
        
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
call_manager = CallManager()
