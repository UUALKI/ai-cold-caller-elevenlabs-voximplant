import requests
import json
import logging
from typing import Dict, Optional, List
from config_elevenlabs import (
    ELEVENLABS_AGENT_API_KEY,
    ELEVENLABS_BASE_URL,
    ELEVENLABS_VOICE_ID
)

# –ù–æ–≤—ã–π Agent ID
ELEVENLABS_AGENT_ID = "agent_8701k4554cs1e69arzeae6vva5qz"
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ElevenLabsAgentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ElevenLabs AI Agent"""
    
    def __init__(self):
        self.api_key = ELEVENLABS_AGENT_API_KEY
        self.agent_id = ELEVENLABS_AGENT_ID
        self.base_url = ELEVENLABS_BASE_URL
        self.voice_id = ELEVENLABS_VOICE_ID
        
        logger.info(f"ü§ñ ElevenLabs Agent Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Agent ID: {self.agent_id}")
        logger.info(f"   API Key: {self.api_key[:20]}...")
        logger.info(f"   Voice ID: {self.voice_id}")
    
    def test_agent_connection(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs Agent"""
        try:
            url = f"{self.base_url}/agent/{self.agent_id}"
            
            headers = {
                'Content-Type': 'application/json',
                'xi-api-key': self.api_key
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                agent_info = response.json()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs Agent —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"   –ò–º—è –∞–≥–µ–Ω—Ç–∞: {agent_info.get('name', 'Unknown')}")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {agent_info.get('status', 'Unknown')}")
                
                return {
                    "success": True,
                    "agent_info": agent_info
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent: {response.status_code}")
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def send_message_to_agent(self, message: str, session_id: str = None, message_type: str = "user_input") -> Dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ElevenLabs Agent"""
        try:
            if not session_id:
                session_id = f"test_session_{int(time.time())}"
            
            url = f"{self.base_url}/agent/{self.agent_id}/conversation"
            
            headers = {
                'Content-Type': 'application/json',
                'xi-api-key': self.api_key
            }
            
            data = {
                "session_id": session_id,
                "message_type": message_type,
                "message": message,
                "voice_id": self.voice_id
            }
            
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Agent: '{message[:50]}...'")
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                agent_response = result.get('response') or result.get('message', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Agent –ø–æ–ª—É—á–µ–Ω: '{agent_response[:50]}...'")
                
                return {
                    "success": True,
                    "response": agent_response,
                    "session_id": session_id,
                    "full_response": result
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API Agent: {response.status_code} - {response.text}")
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def get_agent_conversation_history(self, session_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –∞–≥–µ–Ω—Ç–æ–º"""
        try:
            url = f"{self.base_url}/agent/{self.agent_id}/conversation/{session_id}"
            
            headers = {
                'Content-Type': 'application/json',
                'xi-api-key': self.api_key
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                history = response.json()
                logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                
                return {
                    "success": True,
                    "history": history
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}")
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def test_conversation_flow(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–≥–µ–Ω—Ç–æ–º"""
        try:
            logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å Agent")
            
            # –¢–µ—Å—Ç 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            greeting_result = self.send_message_to_agent("", "greeting")
            if not greeting_result["success"]:
                return greeting_result
            
            session_id = greeting_result["session_id"]
            greeting = greeting_result["response"]
            
            logger.info(f"ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {greeting}")
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            question_result = self.send_message_to_agent(
                "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö", 
                session_id, 
                "user_input"
            )
            
            if not question_result["success"]:
                return question_result
            
            answer = question_result["response"]
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {answer}")
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            history_result = self.get_agent_conversation_history(session_id)
            
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            return {
                "success": True,
                "session_id": session_id,
                "greeting": greeting,
                "answer": answer,
                "history": history_result.get("history", [])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
elevenlabs_agent_service = ElevenLabsAgentService()

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def test_elevenlabs_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ElevenLabs Agent"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs AI Agent")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Agent...")
    connection_result = elevenlabs_agent_service.test_agent_connection()
    
    if connection_result["success"]:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_result['error']}")
        return
    
    # –¢–µ—Å—Ç 2: –î–∏–∞–ª–æ–≥
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥...")
    dialog_result = elevenlabs_agent_service.test_conversation_flow()
    
    if dialog_result["success"]:
        print("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–µ–Ω")
        print(f"   Session ID: {dialog_result['session_id']}")
        print(f"   –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {dialog_result['greeting'][:100]}...")
        print(f"   –û—Ç–≤–µ—Ç: {dialog_result['answer'][:100]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_result['error']}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_elevenlabs_agent()
