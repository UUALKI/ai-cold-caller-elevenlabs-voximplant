#!/usr/bin/env python3
"""
WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Voximplant + ElevenLabs Agent
–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ Python –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Voximplant
"""

import asyncio
import websockets
import json
import base64
import logging
from flask import Flask, request, jsonify
from config_elevenlabs import (
    ELEVENLABS_AGENT_API_KEY,
    ELEVENLABS_AGENT_ID,
    VOXIMPLANT_ACCOUNT_ID,
    VOXIMPLANT_API_KEY,
    VOXIMPLANT_APPLICATION_ID,
    VOXIMPLANT_SCENARIO
)
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ElevenLabsWebSocketClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è ElevenLabs Conversational AI"""
    
    def __init__(self, agent_id, api_key):
        self.agent_id = agent_id
        self.api_key = api_key
        self.websocket = None
        self.voximplant_connection = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket"""
        try:
            # WebSocket URL –¥–ª—è ElevenLabs Conversational AI
            ws_url = f"wss://api.elevenlabs.io/v1/convai/conversation?agent_id={self.agent_id}"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers = {
                "xi-api-key": self.api_key
            }
            
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket: {ws_url}")
            
            self.websocket = await websockets.connect(
                ws_url,
                extra_headers=headers
            )
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ElevenLabs WebSocket")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs: {e}")
            return False
    
    async def send_audio(self, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ ElevenLabs"""
        if self.websocket and self.websocket.open:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64
                audio_base64 = base64.b64encode(audio_data).decode('utf-8')
                
                message = {
                    "user_audio_chunk": audio_base64
                }
                
                await self.websocket.send(json.dumps(message))
                logger.debug("üé§ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ElevenLabs")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def listen_for_responses(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç ElevenLabs"""
        if not self.websocket:
            return
            
        try:
            async for message in self.websocket:
                try:
                    data = json.loads(message)
                    await self.handle_elevenlabs_message(data)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def handle_elevenlabs_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ElevenLabs"""
        try:
            message_type = message.get("type")
            
            if message_type == "conversation_initiation_metadata":
                logger.info("üé≠ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞")
                
            elif message_type == "audio":
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
                audio_event = message.get("audio_event", {})
                audio_base64 = audio_event.get("audio_base_64")
                
                if audio_base64:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Voximplant
                    await self.send_audio_to_voximplant(audio_base64)
                    
            elif message_type == "interruption":
                logger.info("üîÑ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞")
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∞—É–¥–∏–æ –≤ Voximplant
                
            elif message_type == "ping":
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                event_id = message.get("ping_event", {}).get("event_id")
                if event_id:
                    pong_response = {
                        "type": "pong",
                        "event_id": event_id
                    }
                    await self.websocket.send(json.dumps(pong_response))
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_audio_to_voximplant(self, audio_base64):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ –≤ Voximplant"""
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ Voximplant
            # –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Voximplant —Å—Ü–µ–Ω–∞—Ä–∏–π
            
            logger.info("üéµ –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Voximplant")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Voximplant: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.websocket:
            await self.websocket.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs –∑–∞–∫—Ä—ã—Ç–æ")

class VoximplantElevenLabsBridge:
    """–ú–æ—Å—Ç –º–µ–∂–¥—É Voximplant –∏ ElevenLabs"""
    
    def __init__(self):
        self.elevenlabs_client = ElevenLabsWebSocketClient(
            ELEVENLABS_AGENT_ID,
            ELEVENLABS_AGENT_API_KEY
        )
        self.active_calls = {}
    
    async def start_call(self, call_id, phone_number):
        """–ó–∞–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Voximplant"""
        try:
            logger.info(f"üìû –ó–∞–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ {call_id} –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
            if await self.elevenlabs_client.connect():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
                asyncio.create_task(self.elevenlabs_client.listen_for_responses())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                self.active_calls[call_id] = {
                    "phone_number": phone_number,
                    "elevenlabs_client": self.elevenlabs_client
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Voximplant API
                await self.initiate_voximplant_call(phone_number, call_id)
                
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ElevenLabs")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def initiate_voximplant_call(self, phone_number, call_id):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Voximplant API"""
        try:
            # URL –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è Voximplant
            url = "https://api.voximplant.com/platform_api/StartScenarios/"
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞
            data = {
                'account_id': VOXIMPLANT_ACCOUNT_ID,
                'api_key': VOXIMPLANT_API_KEY,
                'application_id': VOXIMPLANT_APPLICATION_ID,
                'phone': phone_number.lstrip("+"),
                'scenario_name': VOXIMPLANT_SCENARIO,
                'script_custom_data': json.dumps({
                    'call_id': call_id,
                    'webhook_url': 'http://localhost:8000/voximplant-webhook'
                })
            }
            
            headers = {
                'Host': 'api.voximplant.com',
                'User-Agent': 'Voximplant-ElevenLabs-Bridge/1.0'
            }
            
            response = requests.post(url, data=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Voximplant: {call_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Voximplant API: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
    
    async def handle_voximplant_audio(self, call_id, audio_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç Voximplant"""
        try:
            if call_id in self.active_calls:
                elevenlabs_client = self.active_calls[call_id]["elevenlabs_client"]
                await elevenlabs_client.send_audio(audio_data)
                logger.debug(f"üé§ –ê—É–¥–∏–æ –æ—Ç Voximplant –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π call_id: {call_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def end_call(self, call_id):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            if call_id in self.active_calls:
                elevenlabs_client = self.active_calls[call_id]["elevenlabs_client"]
                await elevenlabs_client.close()
                del self.active_calls[call_id]
                logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ—Å—Ç–∞
bridge = VoximplantElevenLabsBridge()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "healthy", "service": "Voximplant-ElevenLabs-Bridge"})

@app.route('/start-call', methods=['POST'])
async def start_call():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    try:
        data = request.json
        phone_number = data.get('phone_number')
        call_id = data.get('call_id', f"call_{int(asyncio.get_event_loop().time())}")
        
        if not phone_number:
            return jsonify({"error": "phone_number required"}), 400
        
        success = await bridge.start_call(call_id, phone_number)
        
        if success:
            return jsonify({
                "success": True,
                "call_id": call_id,
                "message": "Call started successfully"
            })
        else:
            return jsonify({"error": "Failed to start call"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API start-call: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/voximplant-webhook', methods=['POST'])
async def voximplant_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Voximplant"""
    try:
        data = request.json
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Voximplant: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Voximplant
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        
        return jsonify({"success": True})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/test-elevenlabs-connection', methods=['GET'])
async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs"""
    try:
        success = await bridge.elevenlabs_client.connect()
        
        if success:
            await bridge.elevenlabs_client.close()
            return jsonify({"success": True, "message": "ElevenLabs connection successful"})
        else:
            return jsonify({"success": False, "message": "ElevenLabs connection failed"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)})

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Voximplant-ElevenLabs WebSocket Bridge")
    logger.info(f"ü§ñ Agent ID: {ELEVENLABS_AGENT_ID}")
    logger.info(f"üìû Voximplant Account: {VOXIMPLANT_ACCOUNT_ID}")
    
    app.run(debug=True, port=8000, host='0.0.0.0')
