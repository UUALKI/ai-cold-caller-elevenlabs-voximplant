#!/usr/bin/env python3
"""
–ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ SaluteSpeech API + GPT –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
"""

import json
import logging
import time
from typing import Dict, List, Optional, Any
from datetime import datetime
import openai
from config import OPENAI_API_KEY, ELEVENLABS_API_KEY, OPENROUTER_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LiveDialogSystem:
    """
    –ñ–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Voximplant —Å SaluteSpeech API
    """
    
    def __init__(self):
        self.openai_client = None
        self.conversation_sessions = {}
        self.max_turns = 50
        self.max_session_time = 3600  # 1 —á–∞—Å
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter
        if OPENROUTER_API_KEY:
            try:
                self.openai_client = {
                    'api_key': OPENROUTER_API_KEY,
                    'base_url': "https://openrouter.ai/api/v1"
                }
                logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenRouter: {e}")
        else:
            logger.warning("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def process_asr_text(self, call_id: str, text: str, custom_data: Dict = None) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç SaluteSpeech API
        """
        try:
            logger.info(f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ ASR —Ç–µ–∫—Å—Ç–∞: '{text}' –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞
            session = self._get_or_create_session(call_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['history'].append({
                'role': 'user',
                'content': text,
                'timestamp': datetime.now().isoformat()
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if self._check_limits(session):
                return self._create_response("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.", success=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
            ai_response = self._generate_ai_response(session, text, custom_data)
            
            if ai_response:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
                session['history'].append({
                    'role': 'assistant', 
                    'content': ai_response,
                    'timestamp': datetime.now().isoformat()
                })
                
                session['turn_count'] += 1
                session['last_activity'] = time.time()
                
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç: '{ai_response}'")
                return self._create_response(ai_response, success=True)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç AI")
                return self._create_response("", success=False, error="GPT –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ASR —Ç–µ–∫—Å—Ç–∞: {e}")
            return self._create_response("", success=False, error=str(e))
    
    def _get_or_create_session(self, call_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if call_id not in self.conversation_sessions:
            self.conversation_sessions[call_id] = {
                'call_id': call_id,
                'history': [],
                'turn_count': 0,
                'created_at': time.time(),
                'last_activity': time.time(),
                'context': {
                    'company': '–¢—Ä–∞–Ω—Å—Ç–ò—Ä–µ–∫—Å',
                    'service': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é',
                    'goal': '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
                }
            }
            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–∏–∞–ª–æ–≥–∞: {call_id}")
        
        return self.conversation_sessions[call_id]
    
    def _check_limits(self, session: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –õ–∏–º–∏—Ç —Ö–æ–¥–æ–≤
        if session['turn_count'] >= self.max_turns:
            logger.info(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ö–æ–¥–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {session['call_id']}")
            return True
        
        # –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
        if time.time() - session['created_at'] > self.max_session_time:
            logger.info(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {session['call_id']}")
            return True
        
        return False
    
    def _generate_ai_response(self, session: Dict, user_text: str, custom_data: Dict = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–º–æ—Ü–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            if not self.openai_client:
                logger.error("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            emotion_analysis = self._analyze_emotion(user_text)
            context_info = self._build_dialog_context(session, user_text, custom_data)
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–º–æ—Ü–∏–π
            system_prompt = """–¢—ã - –ê–ª—ë–Ω–∞, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –¢—Ä–∞–Ω—Å—Ç–ò—Ä–µ–∫—Å. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

–ü–†–ê–í–ò–õ–ê –î–ò–ê–õ–û–ì–ê:
1. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
2. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
3. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
4. –°–æ–±–∏—Ä–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞
5. –í –∫–æ–Ω—Ü–µ –ø–æ–ø—Ä–æ—Å–∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
6. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
7. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫—Ä–∏–ø—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
8. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ—è–≤–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
9. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω - —Ä–∞–∑–≤–∏–≤–∞–π —Ç–µ–º—É –∏ —Å–æ–±–∏—Ä–∞–π –¥–µ—Ç–∞–ª–∏
10. –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ: "–ü–æ–Ω—è—Ç–Ω–æ, –∑–Ω–∞—á–∏—Ç..." –∏–ª–∏ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é..."
11. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —Å–≤—è–∑–∫–∏ –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏
12. –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ —ç–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: –µ—Å–ª–∏ –æ–Ω –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω - —É—Å–ø–æ–∫–æ–π, –µ—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è - —É–±–µ–¥–∏

–¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å –∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞.

–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {emotion_analysis}
–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {context_info}"""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            recent_history = session['history'][-10:] if len(session['history']) > 10 else session['history']
            for msg in recent_history:
                messages.append({
                    "role": msg['role'],
                    "content": msg['content']
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": user_text})
            
            logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT (—Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}, —ç–º–æ—Ü–∏—è: {emotion_analysis})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT —á–µ—Ä–µ–∑ OpenRouter (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è API)
            from openai import OpenAI
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenRouter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            client = OpenAI(
                api_key=self.openai_client['api_key'],
                base_url=self.openai_client['base_url'],
                default_headers={
                    "HTTP-Referer": "https://ai-call-prototype.com",
                    "X-Title": "AI Call Prototype",
                    "Authorization": f"Bearer {self.openai_client['api_key']}"
                }
            )
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
                messages=messages,
                max_tokens=150,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                temperature=0.9,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                presence_penalty=0.3,
                frequency_penalty=0.3
            )
            ai_response = response.choices[0].message.content.strip()
            
            if ai_response and len(ai_response.strip()) > 0:
                return ai_response
            else:
                logger.warning("‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
            return None
    
    def _analyze_emotion(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        text_lower = text.lower()
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
        positive_words = ['–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–¥–∞–≤–∞–π—Ç–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–Ω—è—Ç–Ω–æ']
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
        negative_words = ['–Ω–µ—Ç', '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ —Ö–æ—á—É', '–∑–∞–Ω—è—Ç', '–Ω–µ—É–¥–æ–±–Ω–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–¥–æ—Ä–æ–≥–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç']
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
        neutral_words = ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '—Å–∫–æ–ª—å–∫–æ', '–º–æ–∂–Ω–æ', '–≤–æ–∑–º–æ–∂–Ω–æ', '–∞', '–Ω–æ']
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        emotional_words = ['–≤–æ–ª–Ω—É—é—Å—å', '–±–µ—Å–ø–æ–∫–æ—é—Å—å', '—Å–æ–º–Ω–µ–≤–∞—é—Å—å', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–¥—É–º–∞—é', '—Ä–µ—à–∞—é', '–æ–±–¥—É–º—ã–≤–∞—é']
        
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        neutral_count = sum(1 for word in neutral_words if word in text_lower)
        emotional_count = sum(1 for word in emotional_words if word in text_lower)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        if len(text) < 5:
            emotion = "–∫—Ä–∞—Ç–∫–∏–π/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"
        elif len(text) > 50:
            emotion = "–ø–æ–¥—Ä–æ–±–Ω—ã–π/–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π"
        elif '!' in text:
            emotion = "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π/–∞–∫—Ç–∏–≤–Ω—ã–π"
        elif '?' in text:
            emotion = "–≤–æ–ø—Ä–æ—à–∞—é—â–∏–π/—Å–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è"
        elif positive_count > negative_count:
            emotion = "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π"
        elif negative_count > positive_count:
            emotion = "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–æ—Ç—Ä–∏—Ü–∞—é—â–∏–π"
        elif emotional_count > 0:
            emotion = "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π/—Å–æ–º–Ω–µ–≤–∞—é—â–∏–π—Å—è"
        elif neutral_count > 0:
            emotion = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–≤–æ–ø—Ä–æ—à–∞—é—â–∏–π"
        else:
            emotion = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        
        logger.info(f"üé≠ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π: '{text}' -> {emotion}")
        return emotion
    
    def _build_dialog_context(self, session: Dict, user_text: str, custom_data: Dict = None) -> Dict:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
        context = {
            'company': session['context']['company'],
            'service': session['context']['service'],
            'goal': session['context']['goal'],
            'turn_count': session['turn_count'],
            'session_duration': time.time() - session['created_at'],
            'conversation_flow': custom_data.get('conversation_flow', 'greeting') if custom_data else 'greeting',
            'user_engagement': custom_data.get('user_engagement', 0) if custom_data else 0,
            'confidence': custom_data.get('confidence', 0) if custom_data else 0
        }
        
        if custom_data:
            context.update(custom_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞
        if len(session['history']) > 0:
            recent_user_messages = [msg['content'] for msg in session['history'] if msg['role'] == 'user'][-3:]
            context['recent_user_responses'] = recent_user_messages
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
        if session['turn_count'] == 0:
            context['stage'] = 'greeting'
        elif session['turn_count'] <= 2:
            context['stage'] = 'needs_analysis'
        elif session['turn_count'] <= 4:
            context['stage'] = 'service_details'
        elif session['turn_count'] <= 6:
            context['stage'] = 'contact_request'
        else:
            context['stage'] = 'closing'
        
        logger.info(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: —ç—Ç–∞–ø={context['stage']}, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å={context['user_engagement']}, confidence={context['confidence']}")
        
        return context
    

    
    def _create_response(self, response_text: str, success: bool = True, error: str = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        return {
            "success": success,
            "response": response_text,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
    
    def cleanup_session(self, call_id: str) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if call_id in self.conversation_sessions:
            session = self.conversation_sessions.pop(call_id)
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–∏–∞–ª–æ–≥–∞: {call_id} (—Ö–æ–¥–æ–≤: {session['turn_count']})")
    
    def cleanup_old_sessions(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏"""
        current_time = time.time()
        expired_sessions = []
        
        for call_id, session in self.conversation_sessions.items():
            if current_time - session['last_activity'] > self.max_session_time:
                expired_sessions.append(call_id)
        
        for call_id in expired_sessions:
            self.cleanup_session(call_id)
        
        if expired_sessions:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_sessions)} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞
dialog_system = LiveDialogSystem()

def process_webhook_event(event_data: Dict) -> Dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —Å–æ–±—ã—Ç–∏—è –æ—Ç Voximplant
    """
    try:
        event_type = event_data.get('event')
        call_id = event_data.get('call_id', 'unknown')
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
        
        if event_type == 'asr_text':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç SaluteSpeech API
            text = event_data.get('text', '')
            custom_data = event_data.get('custom_data', {})
            
            if text:
                return dialog_system.process_asr_text(call_id, text, custom_data)
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ASR")
                return dialog_system._create_response("", success=False, error="–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ASR")
        
        elif event_type == 'call_ended':
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
            dialog_system.cleanup_session(call_id)
            return dialog_system._create_response("–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", success=True)
        
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
            return dialog_system._create_response("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", success=False, error="Unknown event type")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–±—ã—Ç–∏—è: {e}")
        return dialog_system._create_response("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", success=False, error=str(e))

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
def cleanup_old_sessions_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π"""
    dialog_system.cleanup_old_sessions()
