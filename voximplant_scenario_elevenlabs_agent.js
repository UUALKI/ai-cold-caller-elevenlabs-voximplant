/**
 * ü§ñ ElevenLabs AI Agent Integration
 * üé≠ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ElevenLabs AI Agent Platform
 * üìû –†–µ–∞–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
 * üß† –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ ElevenLabs Agent
 */

require(Modules.ASR);
require(Modules.ElevenLabs);

////////// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø //////////
const CALLER_ID = '74951183993'; // –ù–æ–º–µ—Ä –∏–∑ config.py
const CONFIDENCE_THRESHOLD = 0.6;
const RECOGNITION_TIMEOUT = 8000;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let customDataParsed = {};
let call = undefined;
let elevenLabsPlayer = undefined;
let conversationTurns = 0;
let isBotSpeaking = false;
let isProcessingAudio = false;
let currentASR = null;
let asrTimeoutId = null;
let playerTimeoutId = null;
let callStartTime = null;
let conversationSessionId = null;
let conversationHistory = [];

////////// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø //////////

VoxEngine.addEventListener(AppEvents.Started, () => {
    Logger.write("ü§ñ ElevenLabs AI Agent Integration –∑–∞–ø—É—â–µ–Ω!");
    Logger.write("üé≠ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ElevenLabs Agent Platform");
    
    const customData = VoxEngine.customData();
    if (customData) {
        handleCustomData(customData);
    } else {
        Logger.write("‚ùå No custom data provided. Terminating.");
        VoxEngine.terminate();
    }
});

const handleCustomData = (customData) => {
    try {
        customDataParsed = JSON.parse(customData);
        callStartTime = Date.now();
        conversationSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        Logger.write(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è: ${customDataParsed.phone}`);
        Logger.write(`üé≠ Agent ID: ${customDataParsed.agent_id}`);
        Logger.write(`üîë API Key: ${customDataParsed.api_key ? customDataParsed.api_key.substring(0, 20) + '...' : 'Not provided'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–≤–æ–Ω–∫–æ–º
        checkAgentAvailability().then(() => {
            initiateCall();
        }).catch((error) => {
            Logger.write(`‚ùå Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`);
            VoxEngine.terminate();
        });
        
    } catch (error) {
        Logger.write(`‚ùå Config error: ${error}`);
        VoxEngine.terminate();
    }
};

const checkAgentAvailability = async () => {
    try {
        const agentId = customDataParsed.agent_id;
        const apiKey = customDataParsed.api_key;
        
        if (!agentId || !apiKey) {
            throw new Error("Missing agent_id or api_key");
        }
        
        const url = `https://api.elevenlabs.io/v1/agent/${agentId}`;
        
        Logger.write(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞: ${agentId}`);
        
        const response = await Net.httpRequestAsync(url, {
            method: 'GET',
            headers: [
                'Content-Type: application/json',
                `xi-api-key: ${apiKey}`
            ]
        });
        
        Logger.write(`üì° Agent check response code: ${response.code}`);
        
        if (response.code === 200) {
            const agentData = JSON.parse(response.body);
            Logger.write(`‚úÖ Agent –¥–æ—Å—Ç—É–ø–µ–Ω: ${agentData.name || agentId}`);
            return true;
        } else {
            throw new Error(`Agent check failed: ${response.code} - ${response.body}`);
        }
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥–µ–Ω—Ç–∞: ${error}`);
        throw error;
    }
};

const initiateCall = () => {
    Logger.write(`üìû –ó–≤–æ–Ω–æ–∫: ${customDataParsed.phone}`);
    
    call = VoxEngine.callPSTN(customDataParsed.phone, CALLER_ID);
    
    call.addEventListener(CallEvents.Connected, startElevenLabsConversation);
    call.addEventListener(CallEvents.Disconnected, saveAndCleanup);
    call.addEventListener(CallEvents.Failed, saveAndCleanup);
    
    call.answer();
};

////////// üé≠ ELEVENLABS AGENT –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø //////////

const startElevenLabsConversation = async () => {
    Logger.write("üé≠ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å ElevenLabs AI Agent");
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ ElevenLabs Agent
        const greeting = await callElevenLabsAgent("", "greeting");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversationHistory.push({
            role: "agent",
            text: greeting,
            timestamp: new Date().toISOString()
        });
        
        Logger.write(`ü§ñ Agent –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: "${greeting}"`);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await speakElevenLabsResponse(greeting);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        setTimeout(startListening, 500);
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞: ${error}`);
        VoxEngine.terminate();
    }
};

const callElevenLabsAgent = async (userMessage, messageType = "user_input") => {
    try {
        const agentId = customDataParsed.agent_id;
        const apiKey = customDataParsed.api_key;
        
        if (!agentId || !apiKey) {
            throw new Error("Missing agent_id or api_key");
        }
        
        const url = `https://api.elevenlabs.io/v1/agent/${agentId}/conversation`;
        
        const requestData = {
            session_id: conversationSessionId,
            message_type: messageType,
            message: userMessage || "",
            voice_id: customDataParsed.voice_id || "21m00Tcm4TlvDq8ikWAM"
        };
        
        Logger.write(`üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ElevenLabs Agent: ${messageType}`);
        Logger.write(`üîó URL: ${url}`);
        Logger.write(`üìù Request data: ${JSON.stringify(requestData)}`);
        Logger.write(`üîë API Key (first 10 chars): ${apiKey.substring(0, 10)}...`);
        
        const response = await Net.httpRequestAsync(url, {
            method: 'POST',
            headers: [
                'Content-Type: application/json',
                `xi-api-key: ${apiKey}`
            ],
            postData: JSON.stringify(requestData)
        });
        
        Logger.write(`üì° ElevenLabs API response code: ${response.code}`);
        Logger.write(`üì° Response headers: ${JSON.stringify(response.headers)}`);
        Logger.write(`üì° Response body: ${response.body}`);
        
        if (response.code === 200) {
            const result = JSON.parse(response.body);
            const agentResponse = result.response || result.message || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";
            
            Logger.write(`‚úÖ ElevenLabs Agent –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${agentResponse.substring(0, 50)}...`);
            return agentResponse;
            
        } else {
            Logger.write(`‚ùå ElevenLabs API error: ${response.code} - ${response.body}`);
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (response.code === 401) {
                Logger.write("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á");
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.";
            } else if (response.code === 404) {
                Logger.write("‚ùå Agent –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ agent_id");
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            } else if (response.code === 429) {
                Logger.write("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤");
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            } else {
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            }
        }
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ ElevenLabs Agent: ${error}`);
        Logger.write(`‚ùå Error stack: ${error.stack || 'No stack trace'}`);
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    }
};

////////// üé§ ASR –õ–û–ì–ò–ö–ê //////////

const startListening = () => {
    if (isBotSpeaking || isProcessingAudio) {
        Logger.write("üé§ –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è - –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞—É–¥–∏–æ");
        return;
    }
    
    if (currentASR) {
        currentASR.stop();
    }
    
    try {
        currentASR = VoxEngine.createASR({
            lang: 'ru-RU',
            mode: ASRMode.SINGLE_UTTERANCE,
            timeout: RECOGNITION_TIMEOUT
        });
        
        currentASR.addEventListener(ASREvents.Result, handleASRResult);
        currentASR.addEventListener(ASREvents.Error, handleASRError);
        currentASR.addEventListener(ASREvents.Timeout, handleASRTimeout);
        
        currentASR.start();
        Logger.write("üé§ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞");
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è ASR
        asrTimeoutId = setTimeout(() => {
            if (currentASR) {
                Logger.write("‚è∞ ASR —Ç–∞–π–º–∞—É—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ");
                currentASR.stop();
            }
        }, RECOGNITION_TIMEOUT + 2000);
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ASR: ${error}`);
        setTimeout(startListening, 2000);
    }
};

const handleASRResult = async (event) => {
    if (asrTimeoutId) {
        clearTimeout(asrTimeoutId);
        asrTimeoutId = null;
    }
    
    const userText = event.text;
    const confidence = event.confidence || 0;
    
    Logger.write(`üë§ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª: "${userText}" (confidence: ${confidence})`);
    
    if (userText && userText.trim().length > 0 && confidence >= CONFIDENCE_THRESHOLD) {
        conversationTurns++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversationHistory.push({
            role: "client",
            text: userText,
            timestamp: new Date().toISOString(),
            confidence: confidence
        });
        
        isProcessingAudio = true;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ElevenLabs Agent
            const agentResponse = await callElevenLabsAgent(userText, "user_input");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversationHistory.push({
                role: "agent",
                text: agentResponse,
                timestamp: new Date().toISOString()
            });
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            await speakElevenLabsResponse(agentResponse);
            
        } catch (error) {
            Logger.write(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${error}`);
            await speakElevenLabsResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        } finally {
            isProcessingAudio = false;
        }
        
    } else if (userText && userText.trim().length > 0) {
        Logger.write(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ASR: ${confidence}`);
        await speakElevenLabsResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?");
        setTimeout(startListening, 1000);
        
    } else {
        Logger.write("üîá –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ASR");
        setTimeout(startListening, 1000);
    }
};

const handleASRError = (event) => {
    if (asrTimeoutId) {
        clearTimeout(asrTimeoutId);
        asrTimeoutId = null;
    }
    
    Logger.write(`‚ùå ASR –æ—à–∏–±–∫–∞: ${event.error}`);
    setTimeout(startListening, 2000);
};

const handleASRTimeout = () => {
    if (asrTimeoutId) {
        clearTimeout(asrTimeoutId);
        asrTimeoutId = null;
    }
    
    Logger.write("‚è∞ ASR —Ç–∞–π–º–∞—É—Ç - –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–∫–∞–∑–∞–ª –Ω–∏—á–µ–≥–æ");
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥, –ø—Ä–æ—â–∞–µ–º—Å—è
    if (conversationTurns === 0) {
        speakElevenLabsResponse("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
        setTimeout(() => VoxEngine.terminate(), 3000);
    } else {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
        setTimeout(startListening, 1000);
    }
};

////////// üéµ ELEVENLABS TTS //////////

const speakElevenLabsResponse = async (text) => {
    if (isBotSpeaking) {
        Logger.write("üéµ –ü—Ä–æ–ø—É—Å–∫ TTS - –±–æ—Ç —É–∂–µ –≥–æ–≤–æ—Ä–∏—Ç");
        return;
    }
    
    try {
        Logger.write(`ü§ñ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç: "${text.substring(0, 50)}..."`);
        
        isBotSpeaking = true;
        
        const voiceId = customDataParsed.voice_id || "21m00Tcm4TlvDq8ikWAM";
        
        const ttsParameters = {
            voice_id: voiceId,
            model_id: "eleven_multilingual_v2",
            voice_settings: {
                stability: 0.5,
                similarity_boost: 0.75
            }
        };
        
        elevenLabsPlayer = ElevenLabs.createRealtimeTTSPlayer(text, ttsParameters);
        
        if (!elevenLabsPlayer) {
            throw new Error("Failed to create TTS player");
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π TTS
        elevenLabsPlayer.addEventListener(PlayerEvents.Started, () => {
            Logger.write("üéµ TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å");
        });
        
        elevenLabsPlayer.addEventListener(PlayerEvents.PlaybackFinished, () => {
            Logger.write("üéµ TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            
            if (playerTimeoutId) {
                clearTimeout(playerTimeoutId);
                playerTimeoutId = null;
            }
            
            isBotSpeaking = false;
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
            setTimeout(() => {
                if (!isBotSpeaking) {
                    startListening();
                }
            }, 500);
        });
        
        elevenLabsPlayer.addEventListener(PlayerEvents.PlaybackError, (event) => {
            Logger.write(`‚ùå TTS –æ—à–∏–±–∫–∞: ${event.error || 'Unknown error'}`);
            isBotSpeaking = false;
            setTimeout(startListening, 1000);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –∑–≤–æ–Ω–æ–∫
        if (elevenLabsPlayer && call) {
            elevenLabsPlayer.sendMediaTo(call);
            Logger.write("üéµ TTS –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∑–≤–æ–Ω–æ–∫");
            
            // Backup —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
            playerTimeoutId = setTimeout(() => {
                if (isBotSpeaking) {
                    Logger.write("‚è∞ TTS backup —Ç–∞–π–º–µ—Ä - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º");
                    isBotSpeaking = false;
                    setTimeout(startListening, 500);
                }
            }, 10000);
            
        } else {
            throw new Error("TTS player or call not available");
        }
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ TTS: ${error}`);
        isBotSpeaking = false;
        setTimeout(startListening, 1000);
    }
};

////////// üìä –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• //////////

const saveAndCleanup = async () => {
    Logger.write("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –∏ –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã");
    
    try {
        const callDuration = Math.round((Date.now() - callStartTime) / 1000);
        
        const callData = {
            call_id: conversationSessionId,
            phone_number: customDataParsed.phone,
            start_time: new Date(callStartTime).toISOString(),
            end_time: new Date().toISOString(),
            duration: callDuration,
            status: "completed",
            conversation: conversationHistory,
            conversation_turns: conversationTurns,
            agent_id: customDataParsed.agent_id,
            outcome: analyzeOutcome(conversationHistory),
            metrics: analyzeMetrics(conversationHistory, callDuration)
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ webhook
        const webhookUrl = customDataParsed.webhook_url || "http://localhost:8000/api/call-results";
        
        Logger.write(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ webhook: ${webhookUrl}`);
        
        const response = await Net.httpRequestAsync(webhookUrl, {
            method: 'POST',
            headers: ['Content-Type: application/json'],
            postData: JSON.stringify(callData)
        });
        
        Logger.write(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. Response code: ${response.code}`);
        
    } catch (error) {
        Logger.write(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (currentASR) {
        currentASR.stop();
    }
    
    if (asrTimeoutId) {
        clearTimeout(asrTimeoutId);
    }
    
    if (playerTimeoutId) {
        clearTimeout(playerTimeoutId);
    }
    
    VoxEngine.terminate();
};

////////// üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í //////////

const analyzeOutcome = (conversation) => {
    if (conversation.length === 0) return "no_conversation";
    
    const lastClientMessage = conversation
        .filter(msg => msg.role === "client")
        .pop()?.text.toLowerCase() || "";
    
    if (lastClientMessage.includes("–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ") || 
        lastClientMessage.includes("–¥–∞–≤–∞–π—Ç–µ") || 
        lastClientMessage.includes("—Ö–æ—Ä–æ—à–æ") ||
        lastClientMessage.includes("–¥–∞")) {
        return "interested";
    } else if (lastClientMessage.includes("–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç") || 
               lastClientMessage.includes("–Ω–µ—Ç") ||
               lastClientMessage.includes("–Ω–µ –Ω—É–∂–Ω–æ")) {
        return "not_interested";
    } else if (lastClientMessage.includes("–ø–æ–∑–∂–µ") ||
               lastClientMessage.includes("–Ω–µ —Å–µ–π—á–∞—Å")) {
        return "maybe_later";
    } else {
        return "neutral";
    }
};

const analyzeMetrics = (conversation, duration) => {
    const clientMessages = conversation.filter(msg => msg.role === "client");
    const agentMessages = conversation.filter(msg => msg.role === "agent");
    
    let engagement = "low";
    if (clientMessages.length >= 3) engagement = "high";
    else if (clientMessages.length >= 1) engagement = "medium";
    
    let sentiment = "neutral";
    const positiveWords = ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–¥–∞", "–¥–∞–≤–∞–π—Ç–µ", "–æ—Ç–ª–∏—á–Ω–æ"];
    const negativeWords = ["–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–Ω–µ—Ç", "–Ω–µ –Ω—É–∂–Ω–æ", "–¥–æ—Ä–æ–≥–æ"];
    
    const allClientText = clientMessages.map(msg => msg.text.toLowerCase()).join(" ");
    
    const positiveCount = positiveWords.filter(word => allClientText.includes(word)).length;
    const negativeCount = negativeWords.filter(word => allClientText.includes(word)).length;
    
    if (positiveCount > negativeCount) sentiment = "positive";
    else if (negativeCount > positiveCount) sentiment = "negative";
    
    return {
        turns: conversation.length,
        client_turns: clientMessages.length,
        agent_turns: agentMessages.length,
        engagement: engagement,
        sentiment: sentiment,
        avg_response_time: duration / Math.max(conversation.length, 1),
        key_topics: extractKeyTopics(conversation)
    };
};

const extractKeyTopics = (conversation) => {
    const topics = [];
    const allText = conversation.map(msg => msg.text.toLowerCase()).join(" ");
    
    if (allText.includes("—Ü–µ–Ω–∞") || allText.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å")) topics.push("pricing");
    if (allText.includes("—Å—Ä–æ–∫") || allText.includes("–≤—Ä–µ–º—è")) topics.push("timing");
    if (allText.includes("–∫–∞—á–µ—Å—Ç–≤–æ") || allText.includes("–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")) topics.push("quality");
    if (allText.includes("–∫–æ–º–ø–∞–Ω–∏—è") || allText.includes("–æ –≤–∞—Å")) topics.push("company_info");
    
    return topics;
};

////////// üßπ –û–ß–ò–°–¢–ö–ê //////////

const cleanup = () => {
    Logger.write("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ElevenLabs Agent");
    
    if (currentASR) {
        currentASR.stop();
    }
    
    if (asrTimeoutId) {
        clearTimeout(asrTimeoutId);
    }
    
    if (playerTimeoutId) {
        clearTimeout(playerTimeoutId);
    }
    
    VoxEngine.terminate();
};
