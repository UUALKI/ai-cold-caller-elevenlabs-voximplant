#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Voximplant + ElevenLabs WebSocket
"""

import asyncio
import websockets
import json
import base64
import logging
import time
from flask import Flask, request, jsonify, render_template
from config_elevenlabs import (
    ELEVENLABS_AGENT_API_KEY,
    VOXIMPLANT_ACCOUNT_ID,
    VOXIMPLANT_API_KEY,
    VOXIMPLANT_APPLICATION_ID,
    VOXIMPLANT_SCENARIO
)

# –ù–æ–≤—ã–π Agent ID
ELEVENLABS_AGENT_ID = "agent_8701k4554cs1e69arzeae6vva5qz"
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ElevenLabsWebSocketClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è ElevenLabs Conversational AI"""
    
    def __init__(self, agent_id, api_key):
        self.agent_id = agent_id
        self.api_key = api_key
        self.websocket = None
        self.conversation_id = None
        self.audio_format = "ulaw_8000"
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket"""
        try:
            # WebSocket URL –¥–ª—è ElevenLabs Conversational AI
            ws_url = f"wss://api.elevenlabs.io/v1/convai/conversation?agent_id={self.agent_id}"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers = {
                "xi-api-key": self.api_key
            }
            
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs WebSocket: {ws_url}")
            
            self.websocket = await websockets.connect(
                ws_url,
                additional_headers=headers
            )
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ElevenLabs WebSocket")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs: {e}")
            return False
    
    async def send_audio(self, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ ElevenLabs"""
        if self.websocket and self.websocket.open:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ base64
                audio_base64 = base64.b64encode(audio_data).decode('utf-8')
                
                message = {
                    "user_audio_chunk": audio_base64
                }
                
                await self.websocket.send(json.dumps(message))
                logger.debug("üé§ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ElevenLabs")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def listen_for_responses(self, callback):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç ElevenLabs"""
        if not self.websocket:
            return
            
        try:
            async for message in self.websocket:
                try:
                    data = json.loads(message)
                    await self.handle_elevenlabs_message(data, callback)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
    
    async def handle_elevenlabs_message(self, message, callback):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ElevenLabs"""
        try:
            message_type = message.get("type")
            
            if message_type == "conversation_initiation_metadata":
                metadata = message.get("conversation_initiation_metadata_event", {})
                self.conversation_id = metadata.get("conversation_id")
                self.audio_format = metadata.get("agent_output_audio_format", "ulaw_8000")
                logger.info(f"üé≠ –î–∏–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.conversation_id}")
                
            elif message_type == "audio":
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
                audio_event = message.get("audio_event", {})
                audio_base64 = audio_event.get("audio_base_64")
                
                if audio_base64:
                    # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Voximplant
                    await callback(audio_base64, self.audio_format)
                    
            elif message_type == "interruption":
                logger.info("üîÑ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞")
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∞—É–¥–∏–æ –≤ Voximplant
                
            elif message_type == "ping":
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                event_id = message.get("ping_event", {}).get("event_id")
                if event_id:
                    pong_response = {
                        "type": "pong",
                        "event_id": event_id
                    }
                    await self.websocket.send(json.dumps(pong_response))
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.websocket:
            await self.websocket.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ElevenLabs –∑–∞–∫—Ä—ã—Ç–æ")

class VoximplantElevenLabsBridge:
    """–ú–æ—Å—Ç –º–µ–∂–¥—É Voximplant –∏ ElevenLabs"""
    
    def __init__(self):
        self.active_calls = {}
    
    async def start_call(self, call_id, phone_number):
        """–ó–∞–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Voximplant"""
        try:
            logger.info(f"üìû –ó–∞–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ {call_id} –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}")
            
            # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è ElevenLabs
            elevenlabs_client = ElevenLabsWebSocketClient(
                ELEVENLABS_AGENT_ID,
                ELEVENLABS_AGENT_API_KEY
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ElevenLabs
            if await elevenlabs_client.connect():
                # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Voximplant
                async def send_audio_to_voximplant(audio_base64, audio_format):
                    await self.send_audio_to_voximplant(call_id, audio_base64, audio_format)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
                asyncio.create_task(elevenlabs_client.listen_for_responses(send_audio_to_voximplant))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                self.active_calls[call_id] = {
                    "phone_number": phone_number,
                    "elevenlabs_client": elevenlabs_client,
                    "webhook_url": f"http://localhost:8000/voximplant-webhook/{call_id}"
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Voximplant API
                call_success = await self.initiate_voximplant_call(phone_number, call_id)
                
                if call_success:
                    return True
                else:
                    # –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                    await elevenlabs_client.close()
                    if call_id in self.active_calls:
                        del self.active_calls[call_id]
                    return False
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ElevenLabs")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def initiate_voximplant_call(self, phone_number, call_id):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Voximplant API"""
        try:
            # URL –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è Voximplant
            url = "https://api.voximplant.com/platform_api/StartScenarios/"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º params –¥–ª—è POST)
            params = {
                'account_id': VOXIMPLANT_ACCOUNT_ID,
                'api_key': VOXIMPLANT_API_KEY,
                'application_id': VOXIMPLANT_APPLICATION_ID,
                'phone': phone_number.lstrip("+"),
                'scenario_name': VOXIMPLANT_SCENARIO,
                'script_custom_data': json.dumps({
                    'call_id': call_id,
                    'phone_number': phone_number,
                    'webhook_url': f'http://localhost:8000/voximplant-webhook/{call_id}',
                    'elevenlabs_agent_id': ELEVENLABS_AGENT_ID,
                    'elevenlabs_api_key': ELEVENLABS_AGENT_API_KEY
                })
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º rule_name –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º rule_id)
            try:
                from config import VOXIMPLANT_RULE_NAME
                if VOXIMPLANT_RULE_NAME and VOXIMPLANT_RULE_NAME.strip():
                    params['rule_name'] = VOXIMPLANT_RULE_NAME
                    logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º rule_name: {VOXIMPLANT_RULE_NAME}")
                else:
                    logger.info("üìã rule_name –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ scenario_name")
            except ImportError:
                logger.info("üìã VOXIMPLANT_RULE_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config")
            
            headers = {
                'Host': 'api.voximplant.com',
                'User-Agent': 'Voximplant-ElevenLabs-Bridge/1.0'
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Voximplant API:")
            logger.info(f"   URL: {url}")
            logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            response = requests.post(url, data=params, headers=headers, timeout=30)
            
            logger.info(f"üì• –û—Ç–≤–µ—Ç Voximplant API:")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            logger.info(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    if result.get('result'):
                        logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Voximplant: {result['result']}")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Voximplant API: {result}")
                        return False
                except json.JSONDecodeError:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {response.text}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Voximplant API: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
            return False
    
    async def handle_voximplant_audio(self, call_id, audio_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç Voximplant"""
        try:
            if call_id in self.active_calls:
                elevenlabs_client = self.active_calls[call_id]["elevenlabs_client"]
                await elevenlabs_client.send_audio(audio_data)
                logger.debug(f"üé§ –ê—É–¥–∏–æ –æ—Ç Voximplant –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π call_id: {call_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
    
    async def send_audio_to_voximplant(self, call_id, audio_base64, audio_format):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ –≤ Voximplant"""
        try:
            if call_id in self.active_calls:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ Voximplant
                # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ webhook –∏–ª–∏ WebSocket
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ –∞—É–¥–∏–æ
                audio_data = base64.b64decode(audio_base64)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Voximplant —á–µ—Ä–µ–∑ webhook
                webhook_url = self.active_calls[call_id]["webhook_url"]
                
                response_data = {
                    "call_id": call_id,
                    "audio_data": audio_base64,
                    "audio_format": audio_format,
                    "source": "elevenlabs"
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ Voximplant
                response = requests.post(webhook_url, json=response_data, timeout=10)
                
                if response.status_code == 200:
                    logger.info(f"üéµ –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Voximplant –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Voximplant: {response.status_code}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Voximplant: {e}")
    
    async def end_call(self, call_id):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            if call_id in self.active_calls:
                elevenlabs_client = self.active_calls[call_id]["elevenlabs_client"]
                await elevenlabs_client.close()
                del self.active_calls[call_id]
                logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ—Å—Ç–∞
bridge = VoximplantElevenLabsBridge()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy", 
        "service": "Voximplant-ElevenLabs-Bridge",
        "active_calls": len(bridge.active_calls)
    })

@app.route('/form')
def call_form():
    """–§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    return render_template('call_form.html')

@app.route('/start-call', methods=['POST'])
def start_call():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    try:
        data = request.json
        phone_number = data.get('phone_number')
        call_id = data.get('call_id', f"call_{int(time.time())}")
        
        if not phone_number:
            return jsonify({"error": "phone_number required"}), 400
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            success = loop.run_until_complete(bridge.start_call(call_id, phone_number))
        finally:
            loop.close()
        
        if success:
            return jsonify({
                "success": True,
                "call_id": call_id,
                "message": "Call started successfully",
                "webhook_url": f"http://localhost:8000/voximplant-webhook/{call_id}"
            })
        else:
            return jsonify({"error": "Failed to start call"}), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API start-call: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/voximplant-webhook/<call_id>', methods=['POST'])
def voximplant_webhook(call_id):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Voximplant"""
    try:
        data = request.json
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Voximplant –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {data}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ –æ—Ç Voximplant
            if 'audio_data' in data:
                audio_base64 = data['audio_data']
                audio_data = base64.b64decode(audio_base64)
                loop.run_until_complete(bridge.handle_voximplant_audio(call_id, audio_data))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
            if data.get('event') == 'call_ended':
                loop.run_until_complete(bridge.end_call(call_id))
        finally:
            loop.close()
        
        return jsonify({"success": True})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/test-elevenlabs-connection', methods=['GET'])
def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs"""
    try:
        elevenlabs_client = ElevenLabsWebSocketClient(
            ELEVENLABS_AGENT_ID,
            ELEVENLABS_AGENT_API_KEY
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            success = loop.run_until_complete(elevenlabs_client.connect())
            
            if success:
                loop.run_until_complete(elevenlabs_client.close())
                return jsonify({
                    "success": True, 
                    "message": "ElevenLabs connection successful",
                    "agent_id": ELEVENLABS_AGENT_ID
                })
            else:
                return jsonify({
                    "success": False, 
                    "message": "ElevenLabs connection failed"
                })
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)})

@app.route('/active-calls', methods=['GET'])
def get_active_calls():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"""
    calls = []
    for call_id, call_data in bridge.active_calls.items():
        calls.append({
            "call_id": call_id,
            "phone_number": call_data["phone_number"],
            "webhook_url": call_data["webhook_url"]
        })
    
    return jsonify({
        "active_calls": calls,
        "count": len(calls)
    })

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Voximplant-ElevenLabs WebSocket Bridge")
    logger.info(f"ü§ñ Agent ID: {ELEVENLABS_AGENT_ID}")
    logger.info(f"üìû Voximplant Account: {VOXIMPLANT_ACCOUNT_ID}")
    logger.info(f"üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π: {VOXIMPLANT_SCENARIO}")
    
    app.run(debug=False, port=8000, host='0.0.0.0')
