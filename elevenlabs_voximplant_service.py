import requests
import json
import logging
from typing import Dict, Optional
from config_elevenlabs import (
    VOXIMPLANT_ACCOUNT_ID,
    VOXIMPLANT_API_KEY,
    VOXIMPLANT_APPLICATION_ID,
    VOXIMPLANT_RULE_ID,
    VOXIMPLANT_SCENARIO,
    ELEVENLABS_AGENT_API_KEY,
    ELEVENLABS_VOICE_ID
)

# –ù–æ–≤—ã–π Agent ID
ELEVENLABS_AGENT_ID = "agent_8701k4554cs1e69arzeae6vva5qz"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ElevenLabsVoximplantService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ElevenLabs Agent —Å Voximplant"""
    
    def __init__(self):
        self.account_id = VOXIMPLANT_ACCOUNT_ID
        self.api_key = VOXIMPLANT_API_KEY
        self.application_id = VOXIMPLANT_APPLICATION_ID
        self.rule_id = VOXIMPLANT_RULE_ID
        self.scenario = VOXIMPLANT_SCENARIO
        
        # ElevenLabs Agent –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.agent_id = ELEVENLABS_AGENT_ID
        self.agent_api_key = ELEVENLABS_AGENT_API_KEY
        self.voice_id = ELEVENLABS_VOICE_ID
        
        logger.info(f"ü§ñ ElevenLabs Voximplant Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Voximplant Account: {self.account_id}")
        logger.info(f"   Application ID: {self.application_id}")
        logger.info(f"   Agent ID: {self.agent_id}")
    
    def start_elevenlabs_agent_call(self, phone_number: str, custom_config: Dict = None) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ —Å ElevenLabs AI Agent —á–µ—Ä–µ–∑ Voximplant"""
        
        try:
            # –£–±–∏—Ä–∞–µ–º –ø–ª—é—Å –∏–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è Voximplant
            phone = phone_number.lstrip("+")
            
            # URL Voximplant API
            url = 'https://api.voximplant.com/platform_api/StartScenarios/'
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ElevenLabs Agent
            agent_config = {
                "agent_id": custom_config.get("agent_id", self.agent_id),
                "api_key": custom_config.get("api_key", self.agent_api_key),
                "voice_id": custom_config.get("voice_id", self.voice_id),
                "webhook_url": custom_config.get("webhook_url", "http://localhost:8000/api/call-results")
            }
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è Voximplant
            params = {
                'account_id': self.account_id,
                'api_key': self.api_key,
                'application_id': self.application_id,
                'phone': phone,
                'scenario_name': 'elevenlabs_agent_scenario',  # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                'custom_data': json.dumps({
                    "phone": phone_number,
                    "agent_id": agent_config["agent_id"],
                    "api_key": agent_config["api_key"],
                    "voice_id": agent_config["voice_id"],
                    "webhook_url": agent_config["webhook_url"]
                })
            }
            
            logger.info(f"üìû –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ ElevenLabs Agent –Ω–∞: {phone_number}")
            logger.info(f"   Agent ID: {agent_config['agent_id']}")
            logger.info(f"   Voice ID: {agent_config['voice_id']}")
            
            response = requests.post(url, params=params, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get('result') == 0:
                    call_id = result.get('call_id', 'unknown')
                    logger.info(f"‚úÖ –ó–≤–æ–Ω–æ–∫ ElevenLabs Agent –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ! Call ID: {call_id}")
                    
                    return {
                        "success": True,
                        "call_id": call_id,
                        "phone_number": phone_number,
                        "agent_id": agent_config["agent_id"],
                        "message": "–ó–≤–æ–Ω–æ–∫ —Å ElevenLabs AI Agent –∑–∞–ø—É—â–µ–Ω"
                    }
                else:
                    error_msg = result.get('error_msg', 'Unknown Voximplant error')
                    logger.error(f"‚ùå Voximplant error: {error_msg}")
                    
                    return {
                        "success": False,
                        "error": f"Voximplant error: {error_msg}"
                    }
            else:
                logger.error(f"‚ùå HTTP error: {response.status_code} - {response.text}")
                
                return {
                    "success": False,
                    "error": f"HTTP error: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def test_voximplant_connection(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voximplant"""
        try:
            url = 'https://api.voximplant.com/platform_api/GetApplications/'
            
            params = {
                'account_id': self.account_id,
                'api_key': self.api_key
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get('result') == 0:
                    applications = result.get('applications', [])
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voximplant —É—Å–ø–µ—à–Ω–æ")
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(applications)}")
                    
                    return {
                        "success": True,
                        "applications": applications
                    }
                else:
                    error_msg = result.get('error_msg', 'Unknown error')
                    logger.error(f"‚ùå Voximplant API error: {error_msg}")
                    
                    return {
                        "success": False,
                        "error": f"Voximplant API error: {error_msg}"
                    }
            else:
                logger.error(f"‚ùå HTTP error: {response.status_code}")
                
                return {
                    "success": False,
                    "error": f"HTTP error: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Voximplant: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def get_call_history(self, limit: int = 10) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤"""
        try:
            url = 'https://api.voximplant.com/platform_api/GetCallHistory/'
            
            params = {
                'account_id': self.account_id,
                'api_key': self.api_key,
                'count': limit
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get('result') == 0:
                    calls = result.get('calls', [])
                    logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞: {len(calls)} –∑–≤–æ–Ω–∫–æ–≤")
                    
                    return {
                        "success": True,
                        "calls": calls
                    }
                else:
                    error_msg = result.get('error_msg', 'Unknown error')
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {error_msg}")
                    
                    return {
                        "success": False,
                        "error": f"API error: {error_msg}"
                    }
            else:
                logger.error(f"‚ùå HTTP error: {response.status_code}")
                
                return {
                    "success": False,
                    "error": f"HTTP error: {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
elevenlabs_voximplant_service = ElevenLabsVoximplantService()

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def test_elevenlabs_voximplant_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ElevenLabs Agent —Å Voximplant"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs Agent + Voximplant –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voximplant
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voximplant...")
    voximplant_result = elevenlabs_voximplant_service.test_voximplant_connection()
    
    if voximplant_result["success"]:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Voximplant —É—Å–ø–µ—à–Ω–æ")
        apps = voximplant_result.get("applications", [])
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ Voximplant: {voximplant_result['error']}")
        return
    
    # –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤
    print("\n2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤...")
    history_result = elevenlabs_voximplant_service.get_call_history(5)
    
    if history_result["success"]:
        calls = history_result.get("calls", [])
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(calls)} –∑–≤–æ–Ω–∫–æ–≤")
        
        for i, call in enumerate(calls[:3]):
            print(f"   {i+1}. {call.get('phone_number', 'Unknown')} - {call.get('status', 'Unknown')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {history_result['error']}")
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n3. –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∑–≤–æ–Ω–∫–∞ —Å ElevenLabs Agent")
    print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start_elevenlabs_agent_call()")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def start_test_call():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —Å ElevenLabs Agent"""
    print("üìû –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å ElevenLabs Agent")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    test_phone = "+79991234567"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: {test_phone}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent_config = {
        "agent_id": ELEVENLABS_AGENT_ID,
        "api_key": ELEVENLABS_AGENT_API_KEY,
        "voice_id": ELEVENLABS_VOICE_ID,
        "webhook_url": "http://localhost:8000/api/call-results"
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫
    result = elevenlabs_voximplant_service.start_elevenlabs_agent_call(test_phone, agent_config)
    
    if result["success"]:
        print(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Call ID: {result['call_id']}")
        print(f"   Phone: {result['phone_number']}")
        print(f"   Agent ID: {result['agent_id']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞: {result['error']}")

if __name__ == "__main__":
    test_elevenlabs_voximplant_integration()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    # start_test_call()
